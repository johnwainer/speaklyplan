generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/speaklyplan/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                   @id @default(cuid())
  name                  String?
  email                 String                   @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  String                   @default("user")
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  bestStreak            Int                      @default(0)
  currentStreak         Int                      @default(0)
  hasSeenTour           Boolean                  @default(false)
  lastActiveDate        DateTime?
  level                 Int                      @default(1)
  points                Int                      @default(0)
  practiceAvailable     Boolean                  @default(true)
  practiceTimezone      String?
  practiceTopics        String[]                 @default([])
  googleAccessToken     String?
  googleCalendarId      String?
  googleConnected       Boolean                  @default(false)
  googleRefreshToken    String?
  googleTokenExpiresAt  DateTime?
  accounts              Account[]
  calendarIntegration   CalendarIntegration?
  conversations         ChatConversation[]
  mistakes              CommonMistake[]
  learningContext       LearningContext?
  connectionsAsUser1    PracticeConnection[]     @relation("ConnectionsAsUser1")
  connectionsAsUser2    PracticeConnection[]     @relation("ConnectionsAsUser2")
  receivedInvitations   PracticeInvitation[]     @relation("ReceivedInvitations")
  sentInvitations       PracticeInvitation[]     @relation("SentInvitations")
  initiatedMeetings     PracticeMeeting[]        @relation("InitiatedMeetings")
  partnerMeetings       PracticeMeeting[]        @relation("PartnerMeetings")
  practiceNotifications PracticeNotification[]
  practiceSessions      PracticeSession[]
  sessions              Session[]
  sessionAnalytics      SessionAnalytics[]
  userAchievements      UserAchievement[]
  notes                 UserNote[]
  progress              UserProgress[]
  streaks               UserStreak?
  vocabularyProgress    UserVocabularyProgress[]
  vocabularyCards       VocabularyCard[]
  VoiceSession          VoiceSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlanPhase {
  id          String     @id @default(cuid())
  number      Int        @unique
  name        String
  description String?
  weeks       PlanWeek[]
}

model PlanWeek {
  id         String         @id @default(cuid())
  number     Int            @unique
  month      Int
  phaseId    String
  objective  String
  activities PlanActivity[]
  phase      PlanPhase      @relation(fields: [phaseId], references: [id], onDelete: Cascade)
}

model PlanActivity {
  id          String         @id @default(cuid())
  weekId      String
  day         String
  dayNumber   Int
  title       String
  description String
  duration    Int
  category    String
  week        PlanWeek       @relation(fields: [weekId], references: [id], onDelete: Cascade)
  progress    UserProgress[]

  @@unique([weekId, day])
}

model UserProgress {
  id          String       @id @default(cuid())
  userId      String
  activityId  String
  completed   Boolean      @default(false)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  activity    PlanActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}

model UserNote {
  id         String   @id @default(cuid())
  userId     String
  weekNumber Int
  content    String
  reflection String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VocabularyCategory {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  icon        String?
  terms       VocabularyTerm[]
}

model VocabularyTerm {
  id            String                   @id @default(cuid())
  categoryId    String
  term          String
  pronunciation String
  translation   String
  example       String
  difficulty    String
  learned       UserVocabularyProgress[]
  category      VocabularyCategory       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([term, categoryId])
}

model UserVocabularyProgress {
  id           String         @id @default(cuid())
  userId       String
  wordId       String
  mastered     Boolean        @default(false)
  attempts     Int            @default(0)
  lastReviewed DateTime?
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  word         VocabularyTerm @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([userId, wordId])
}

model ResourceCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  resources   Resource[]
}

model Resource {
  id          String           @id @default(cuid())
  categoryId  String
  name        String
  description String
  url         String?
  platform    String?
  rating      Int?
  isFree      Boolean          @default(true)
  category    ResourceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model UserStreak {
  id            String    @id @default(cuid())
  userId        String    @unique
  currentStreak Int       @default(0)
  bestStreak    Int       @default(0)
  lastActivity  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatConversation {
  id            String         @id @default(cuid())
  userId        String
  title         String?
  context       String?
  startedAt     DateTime       @default(now())
  lastMessageAt DateTime       @default(now())
  isActive      Boolean        @default(true)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      ChatMessage[]
  VoiceSession  VoiceSession[]

  @@index([userId, isActive])
}

model ChatMessage {
  id             String           @id @default(cuid())
  conversationId String
  role           String
  content        String
  translation    String?
  createdAt      DateTime         @default(now())
  grammarErrors  Json?
  vocabularyUsed Json?
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

model LearningContext {
  id                 String   @id @default(cuid())
  userId             String   @unique
  currentLevel       String   @default("A1")
  weakAreas          Json     @default("[]")
  strongAreas        Json     @default("[]")
  preferredTopics    Json     @default("[]")
  learningGoals      Json     @default("[]")
  totalConversations Int      @default(0)
  totalMessages      Int      @default(0)
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommonMistake {
  id          String   @id @default(cuid())
  userId      String
  errorType   String
  mistake     String
  correction  String
  explanation String?
  occurrences Int      @default(1)
  lastSeenAt  DateTime @default(now())
  mastered    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mistake])
  @@index([userId, mastered])
}

model PracticeSession {
  id              String   @id @default(cuid())
  userId          String
  sessionType     String
  topic           String?
  duration        Int
  messagesCount   Int
  grammarScore    Float?
  vocabularyScore Float?
  overallScore    Float?
  feedback        String?
  achievements    Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Achievement {
  id          String            @id @default(cuid())
  code        String            @unique
  name        String
  description String
  icon        String
  category    String
  threshold   Int
  points      Int
  createdAt   DateTime          @default(now())
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, unlockedAt])
}

model VocabularyCard {
  id             String    @id @default(cuid())
  userId         String
  word           String
  translation    String
  context        String?
  difficulty     Int       @default(0)
  easeFactor     Float     @default(2.5)
  interval       Int       @default(0)
  repetitions    Int       @default(0)
  nextReviewDate DateTime  @default(now())
  lastReviewedAt DateTime?
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, nextReviewDate])
  @@index([userId, createdAt])
}

model SessionAnalytics {
  id                  String   @id @default(cuid())
  userId              String
  conversationId      String?
  sessionType         String
  duration            Int
  messagesCount       Int      @default(0)
  wordsSpoken         Int      @default(0)
  grammarAccuracy     Float?
  vocabularyDiversity Float?
  responseTime        Float?
  turnTaking          Int      @default(0)
  questionsAsked      Int      @default(0)
  newWordsLearned     Json     @default("[]")
  errorsIdentified    Json     @default("[]")
  topicsDiscussed     Json     @default("[]")
  fluencyScore        Float?
  accuracyScore       Float?
  comprehensionScore  Float?
  overallScore        Float?
  feedback            String?
  strengths           Json     @default("[]")
  areasToImprove      Json     @default("[]")
  createdAt           DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, sessionType])
}

model PracticeInvitation {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  senderId    String
  receiverId  String
  message     String?
  status      InvitationStatus @default(PENDING)
  respondedAt DateTime?
  receiver    User             @relation("ReceivedInvitations", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User             @relation("SentInvitations", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@index([createdAt])
}

model PracticeConnection {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user1Id       String
  user2Id       String
  totalSessions Int               @default(0)
  lastSessionAt DateTime?
  isActive      Boolean           @default(true)
  user1         User              @relation("ConnectionsAsUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User              @relation("ConnectionsAsUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  meetings      PracticeMeeting[]

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([isActive])
}

model PracticeMeeting {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  connectionId      String
  initiatorId       String
  partnerId         String
  scheduledFor      DateTime?
  startedAt         DateTime?
  endedAt           DateTime?
  durationMinutes   Int?
  status            MeetingStatus      @default(SCHEDULED)
  topic             String?
  notes             String?
  externalLink      String?
  initiatorFeedback String?
  partnerFeedback   String?
  initiatorRating   Int?
  partnerRating     Int?
  calendarEventId   String?
  connection        PracticeConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  initiator         User               @relation("InitiatedMeetings", fields: [initiatorId], references: [id], onDelete: Cascade)
  partner           User               @relation("PartnerMeetings", fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([connectionId])
  @@index([initiatorId])
  @@index([partnerId])
  @@index([status])
  @@index([scheduledFor])
  @@index([createdAt])
}

model PracticeNotification {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  userId       String
  type         NotificationType
  title        String
  message      String
  actionUrl    String?
  isRead       Boolean          @default(false)
  readAt       DateTime?
  invitationId String?
  meetingId    String?
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
}

model CalendarIntegration {
  id           String   @id @default(cuid())
  userId       String   @unique
  provider     String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Invitation {
  id             String    @id
  senderEmail    String?
  senderName     String?
  recipientEmail String
  recipientName  String?
  status         String    @default("pending")
  inviteCode     String    @unique
  message        String?
  sentAt         DateTime  @default(now())
  registeredAt   DateTime?
  expiresAt      DateTime

  @@index([inviteCode])
  @@index([recipientEmail])
  @@index([status])
}

model VoiceSession {
  id                 String            @id
  userId             String
  conversationId     String?
  transcript         String
  pronunciationScore Float             @default(0)
  fluencyScore       Float             @default(0)
  accentScore        Float             @default(0)
  phonemeErrors      Json?
  suggestions        String[]
  createdAt          DateTime          @default(now())
  ChatConversation   ChatConversation? @relation(fields: [conversationId], references: [id])
  User               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
  @@index([userId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NotificationType {
  INVITATION_RECEIVED
  INVITATION_ACCEPTED
  INVITATION_REJECTED
  SESSION_SCHEDULED
  SESSION_STARTING_SOON
  SESSION_COMPLETED
  FEEDBACK_REQUESTED
}
